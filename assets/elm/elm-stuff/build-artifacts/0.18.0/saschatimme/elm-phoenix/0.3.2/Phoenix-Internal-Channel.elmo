var _saschatimme$elm_phoenix$Phoenix_Internal_Channel$get = F3(
	function (endpoint, topic, channelsDict) {
		return A3(_saschatimme$elm_phoenix$Phoenix_Internal_Helpers$getIn, endpoint, topic, channelsDict);
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Channel$getState = F3(
	function (endpoint, topic, channelsDict) {
		return A2(
			_elm_lang$core$Maybe$map,
			function (_p0) {
				var _p1 = _p0;
				return _p1.state;
			},
			A3(_saschatimme$elm_phoenix$Phoenix_Internal_Channel$get, endpoint, topic, channelsDict));
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Channel$leaveMessage = function (_p2) {
	var _p3 = _p2;
	return A2(_saschatimme$elm_phoenix$Phoenix_Internal_Message$init, _p3.channel.topic, 'phx_leave');
};
var _saschatimme$elm_phoenix$Phoenix_Internal_Channel$joinMessage = function (_p4) {
	var _p5 = _p4;
	var _p7 = _p5.channel;
	var base = A2(_saschatimme$elm_phoenix$Phoenix_Internal_Message$init, _p7.topic, 'phx_join');
	var _p6 = _p7.payload;
	if (_p6.ctor === 'Nothing') {
		return base;
	} else {
		return A2(_saschatimme$elm_phoenix$Phoenix_Internal_Message$payload, _p6._0, base);
	}
};
var _saschatimme$elm_phoenix$Phoenix_Internal_Channel$InternalChannel = F3(
	function (a, b, c) {
		return {state: a, presenceState: b, channel: c};
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Channel$map = F2(
	function (func, _p8) {
		var _p9 = _p8;
		return A3(
			_saschatimme$elm_phoenix$Phoenix_Internal_Channel$InternalChannel,
			_p9.state,
			_p9.presenceState,
			A2(_saschatimme$elm_phoenix$Phoenix_Channel$map, func, _p9.channel));
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Channel$updatePresenceState = F2(
	function (presenceState, internalChannel) {
		return A3(_saschatimme$elm_phoenix$Phoenix_Internal_Channel$InternalChannel, internalChannel.state, presenceState, internalChannel.channel);
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Channel$updateState = F2(
	function (state, internalChannel) {
		if (internalChannel.channel.debug) {
			var _p10 = function () {
				var _p11 = {ctor: '_Tuple2', _0: state, _1: internalChannel.state};
				_v5_5:
				do {
					if (_p11.ctor === '_Tuple2') {
						switch (_p11._0.ctor) {
							case 'Closed':
								if (_p11._1.ctor === 'Closed') {
									return state;
								} else {
									break _v5_5;
								}
							case 'Joining':
								if (_p11._1.ctor === 'Joining') {
									return state;
								} else {
									break _v5_5;
								}
							case 'Joined':
								if (_p11._1.ctor === 'Joined') {
									return state;
								} else {
									break _v5_5;
								}
							case 'Errored':
								if (_p11._1.ctor === 'Errored') {
									return state;
								} else {
									break _v5_5;
								}
							default:
								if (_p11._1.ctor === 'Disconnected') {
									return state;
								} else {
									break _v5_5;
								}
						}
					} else {
						break _v5_5;
					}
				} while(false);
				return A2(
					_elm_lang$core$Debug$log,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Channel \"',
						A2(_elm_lang$core$Basics_ops['++'], internalChannel.channel.topic, '\"')),
					state);
			}();
			return A3(_saschatimme$elm_phoenix$Phoenix_Internal_Channel$InternalChannel, state, internalChannel.presenceState, internalChannel.channel);
		} else {
			return A3(_saschatimme$elm_phoenix$Phoenix_Internal_Channel$InternalChannel, state, internalChannel.presenceState, internalChannel.channel);
		}
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Channel$insertState = F4(
	function (endpoint, topic, state, dict) {
		var update = _elm_lang$core$Maybe$map(
			_saschatimme$elm_phoenix$Phoenix_Internal_Channel$updateState(state));
		return A4(_saschatimme$elm_phoenix$Phoenix_Internal_Helpers$updateIn, endpoint, topic, update, dict);
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Channel$updatePayload = F2(
	function (payload, _p12) {
		var _p13 = _p12;
		return A3(
			_saschatimme$elm_phoenix$Phoenix_Internal_Channel$InternalChannel,
			_p13.state,
			_p13.presenceState,
			_elm_lang$core$Native_Utils.update(
				_p13.channel,
				{payload: payload}));
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Channel$updateOn = F2(
	function (on, _p14) {
		var _p15 = _p14;
		return A3(
			_saschatimme$elm_phoenix$Phoenix_Internal_Channel$InternalChannel,
			_p15.state,
			_p15.presenceState,
			_elm_lang$core$Native_Utils.update(
				_p15.channel,
				{on: on}));
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Channel$Disconnected = {ctor: 'Disconnected'};
var _saschatimme$elm_phoenix$Phoenix_Internal_Channel$Errored = {ctor: 'Errored'};
var _saschatimme$elm_phoenix$Phoenix_Internal_Channel$Joined = {ctor: 'Joined'};
var _saschatimme$elm_phoenix$Phoenix_Internal_Channel$Joining = {ctor: 'Joining'};
var _saschatimme$elm_phoenix$Phoenix_Internal_Channel$Closed = {ctor: 'Closed'};
