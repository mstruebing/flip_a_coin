var _saschatimme$elm_phoenix$Phoenix_Socket$map = F2(
	function (func, socket) {
		return _elm_lang$core$Native_Utils.update(
			socket,
			{
				onOpen: A2(_elm_lang$core$Maybe$map, func, socket.onOpen),
				onClose: A2(
					_elm_lang$core$Maybe$map,
					F2(
						function (x, y) {
							return function (_p0) {
								return x(
									y(_p0));
							};
						})(func),
					socket.onClose),
				onNormalClose: A2(_elm_lang$core$Maybe$map, func, socket.onNormalClose),
				onAbnormalClose: A2(
					_elm_lang$core$Maybe$map,
					F2(
						function (x, y) {
							return function (_p1) {
								return x(
									y(_p1));
							};
						})(func),
					socket.onAbnormalClose)
			});
	});
var _saschatimme$elm_phoenix$Phoenix_Socket$defaultReconnectTimer = function (failedAttempts) {
	return (_elm_lang$core$Native_Utils.cmp(failedAttempts, 1) < 0) ? 0 : _elm_lang$core$Basics$toFloat(
		A2(_elm_lang$core$Basics$min, 15000, 1000 * failedAttempts));
};
var _saschatimme$elm_phoenix$Phoenix_Socket$onClose = F2(
	function (onClose_, socket) {
		return _elm_lang$core$Native_Utils.update(
			socket,
			{
				onClose: _elm_lang$core$Maybe$Just(onClose_)
			});
	});
var _saschatimme$elm_phoenix$Phoenix_Socket$onNormalClose = F2(
	function (onNormalClose_, socket) {
		return _elm_lang$core$Native_Utils.update(
			socket,
			{
				onNormalClose: _elm_lang$core$Maybe$Just(onNormalClose_)
			});
	});
var _saschatimme$elm_phoenix$Phoenix_Socket$onAbnormalClose = F2(
	function (onAbnormalClose_, socket) {
		return _elm_lang$core$Native_Utils.update(
			socket,
			{
				onAbnormalClose: _elm_lang$core$Maybe$Just(onAbnormalClose_)
			});
	});
var _saschatimme$elm_phoenix$Phoenix_Socket$onOpen = F2(
	function (onOpen, socket) {
		return _elm_lang$core$Native_Utils.update(
			socket,
			{
				onOpen: _elm_lang$core$Maybe$Just(onOpen)
			});
	});
var _saschatimme$elm_phoenix$Phoenix_Socket$withDebug = function (socket) {
	return _elm_lang$core$Native_Utils.update(
		socket,
		{debug: true});
};
var _saschatimme$elm_phoenix$Phoenix_Socket$reconnectTimer = F2(
	function (timerFunc, socket) {
		return _elm_lang$core$Native_Utils.update(
			socket,
			{reconnectTimer: timerFunc});
	});
var _saschatimme$elm_phoenix$Phoenix_Socket$withoutHeartbeat = function (socket) {
	return _elm_lang$core$Native_Utils.update(
		socket,
		{withoutHeartbeat: true});
};
var _saschatimme$elm_phoenix$Phoenix_Socket$heartbeatIntervallSeconds = F2(
	function (intervall, socket) {
		return _elm_lang$core$Native_Utils.update(
			socket,
			{
				heartbeatIntervall: _elm_lang$core$Basics$toFloat(intervall) * _elm_lang$core$Time$second
			});
	});
var _saschatimme$elm_phoenix$Phoenix_Socket$withParams = F2(
	function (params, socket) {
		return _elm_lang$core$Native_Utils.update(
			socket,
			{params: params});
	});
var _saschatimme$elm_phoenix$Phoenix_Socket$init = function (endpoint) {
	return {
		endpoint: endpoint,
		params: {ctor: '[]'},
		heartbeatIntervall: 30 * _elm_lang$core$Time$second,
		withoutHeartbeat: false,
		reconnectTimer: _saschatimme$elm_phoenix$Phoenix_Socket$defaultReconnectTimer,
		debug: false,
		onOpen: _elm_lang$core$Maybe$Nothing,
		onClose: _elm_lang$core$Maybe$Nothing,
		onAbnormalClose: _elm_lang$core$Maybe$Nothing,
		onNormalClose: _elm_lang$core$Maybe$Nothing
	};
};
var _saschatimme$elm_phoenix$Phoenix_Socket$AbnormalClose = F2(
	function (a, b) {
		return {reconnectAttempt: a, reconnectWait: b};
	});
var _saschatimme$elm_phoenix$Phoenix_Socket$PhoenixSocket = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {endpoint: a, params: b, heartbeatIntervall: c, withoutHeartbeat: d, reconnectTimer: e, debug: f, onOpen: g, onClose: h, onAbnormalClose: i, onNormalClose: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
