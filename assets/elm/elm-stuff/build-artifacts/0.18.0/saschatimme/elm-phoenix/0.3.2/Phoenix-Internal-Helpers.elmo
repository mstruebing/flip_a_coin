var _saschatimme$elm_phoenix$Phoenix_Internal_Helpers_ops = _saschatimme$elm_phoenix$Phoenix_Internal_Helpers_ops || {};
_saschatimme$elm_phoenix$Phoenix_Internal_Helpers_ops['<&>'] = F2(
	function (x, f) {
		return A2(_elm_lang$core$Task$andThen, f, x);
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Helpers_ops = _saschatimme$elm_phoenix$Phoenix_Internal_Helpers_ops || {};
_saschatimme$elm_phoenix$Phoenix_Internal_Helpers_ops['&>'] = F2(
	function (t1, t2) {
		return A2(
			_elm_lang$core$Task$andThen,
			function (_p0) {
				return t2;
			},
			t1);
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Helpers$statusInfo = function (status) {
	var _p1 = status;
	switch (_p1) {
		case 'ok':
			return A2(
				_elm_lang$core$Json_Decode$map,
				_elm_lang$core$Result$Ok,
				A2(_elm_lang$core$Json_Decode$field, 'response', _elm_lang$core$Json_Decode$value));
		case 'error':
			return A2(
				_elm_lang$core$Json_Decode$map,
				_elm_lang$core$Result$Err,
				A2(_elm_lang$core$Json_Decode$field, 'response', _elm_lang$core$Json_Decode$value));
		default:
			return _elm_lang$core$Json_Decode$fail(
				A2(_elm_lang$core$Basics_ops['++'], status, ' is a not supported status'));
	}
};
var _saschatimme$elm_phoenix$Phoenix_Internal_Helpers$decodeReplyPayload = function (value) {
	var result = A2(
		_elm_lang$core$Json_Decode$decodeValue,
		A2(
			_elm_lang$core$Json_Decode$andThen,
			_saschatimme$elm_phoenix$Phoenix_Internal_Helpers$statusInfo,
			A2(_elm_lang$core$Json_Decode$field, 'status', _elm_lang$core$Json_Decode$string)),
		value);
	var _p2 = result;
	if (_p2.ctor === 'Err') {
		var _p3 = _elm_lang$core$Debug$log(_p2._0);
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(_p2._0);
	}
};
var _saschatimme$elm_phoenix$Phoenix_Internal_Helpers$add = F2(
	function (value, maybeList) {
		var _p4 = maybeList;
		if (_p4.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Just(
				{
					ctor: '::',
					_0: value,
					_1: {ctor: '[]'}
				});
		} else {
			return _elm_lang$core$Maybe$Just(
				{ctor: '::', _0: value, _1: _p4._0});
		}
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Helpers$removeIn = F3(
	function (a, b, dict) {
		var remove = function (maybeDict_) {
			var _p5 = maybeDict_;
			if (_p5.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var newDict = A2(_elm_lang$core$Dict$remove, b, _p5._0);
				return _elm_lang$core$Dict$isEmpty(newDict) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(newDict);
			}
		};
		return A3(_elm_lang$core$Dict$update, a, remove, dict);
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Helpers$insertIn = F4(
	function (a, b, value, dict) {
		var update_ = function (maybeValue) {
			var _p6 = maybeValue;
			if (_p6.ctor === 'Nothing') {
				return _elm_lang$core$Maybe$Just(
					A2(_elm_lang$core$Dict$singleton, b, value));
			} else {
				return _elm_lang$core$Maybe$Just(
					A3(_elm_lang$core$Dict$insert, b, value, _p6._0));
			}
		};
		return A3(_elm_lang$core$Dict$update, a, update_, dict);
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Helpers$updateIn = F4(
	function (a, b, update, dict) {
		var update_ = function (maybeDict) {
			var dict_ = A3(
				_elm_lang$core$Dict$update,
				b,
				update,
				A2(_elm_lang$core$Maybe$withDefault, _elm_lang$core$Dict$empty, maybeDict));
			return _elm_lang$core$Dict$isEmpty(dict_) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(dict_);
		};
		return A3(_elm_lang$core$Dict$update, a, update_, dict);
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Helpers$getIn = F3(
	function (a, b, dict) {
		return A2(
			_elm_lang$core$Maybe$andThen,
			_elm_lang$core$Dict$get(b),
			A2(_elm_lang$core$Dict$get, a, dict));
	});
