var _saschatimme$elm_phoenix$Phoenix_Internal_Socket$debugLogMessage = F2(
	function (_p0, msg) {
		var _p1 = _p0;
		return _p1.socket.debug ? A2(_elm_lang$core$Debug$log, 'Received', msg) : msg;
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Socket$ref = function (_p2) {
	var _p3 = _p2;
	var _p4 = _p3.connection;
	if (_p4.ctor === 'Connected') {
		return _elm_lang$core$Maybe$Just(_p4._1);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _saschatimme$elm_phoenix$Phoenix_Internal_Socket$get = F2(
	function (endpoint, dict) {
		return A2(_elm_lang$core$Dict$get, endpoint, dict);
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Socket$getRef = F2(
	function (endpoint, dict) {
		return A2(
			_elm_lang$core$Maybe$andThen,
			_saschatimme$elm_phoenix$Phoenix_Internal_Socket$ref,
			A2(_saschatimme$elm_phoenix$Phoenix_Internal_Socket$get, endpoint, dict));
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Socket$close = function (_p5) {
	var _p6 = _p5;
	var _p7 = _p6.connection;
	switch (_p7.ctor) {
		case 'Opening':
			return _elm_lang$core$Process$kill(_p7._1);
		case 'Connected':
			return _elm_lang$websocket$WebSocket_LowLevel$close(_p7._0);
		default:
			return _elm_lang$core$Task$succeed(
				{ctor: '_Tuple0'});
	}
};
var _saschatimme$elm_phoenix$Phoenix_Internal_Socket$after = function (backoff) {
	return (_elm_lang$core$Native_Utils.cmp(backoff, 1) < 0) ? _elm_lang$core$Task$succeed(
		{ctor: '_Tuple0'}) : _elm_lang$core$Process$sleep(backoff);
};
var _saschatimme$elm_phoenix$Phoenix_Internal_Socket$open = F2(
	function (_p8, settings) {
		var _p9 = _p8;
		var _p12 = _p9.socket;
		var query = A2(
			_elm_lang$core$String$join,
			'&',
			A2(
				_elm_lang$core$List$map,
				function (_p10) {
					var _p11 = _p10;
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_p11._0,
						A2(_elm_lang$core$Basics_ops['++'], '=', _p11._1));
				},
				_p12.params));
		var url = A2(_elm_lang$core$String$contains, '?', _p12.endpoint) ? A2(
			_elm_lang$core$Basics_ops['++'],
			_p12.endpoint,
			A2(_elm_lang$core$Basics_ops['++'], '&', query)) : A2(
			_elm_lang$core$Basics_ops['++'],
			_p12.endpoint,
			A2(_elm_lang$core$Basics_ops['++'], '?', query));
		return A2(_elm_lang$websocket$WebSocket_LowLevel$open, url, settings);
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Socket$push = F2(
	function (message, _p13) {
		var _p14 = _p13;
		var _p19 = _p14.socket;
		var _p15 = _p14.connection;
		if (_p15.ctor === 'Connected') {
			var _p18 = _p15._1;
			var message_ = _p19.debug ? A2(
				_elm_lang$core$Debug$log,
				'Send',
				A2(_saschatimme$elm_phoenix$Phoenix_Internal_Message$ref, _p18, message)) : A2(_saschatimme$elm_phoenix$Phoenix_Internal_Message$ref, _p18, message);
			return A2(
				_elm_lang$core$Task$map,
				function (maybeBadSend) {
					var _p16 = maybeBadSend;
					if (_p16.ctor === 'Nothing') {
						return _elm_lang$core$Maybe$Just(_p18);
					} else {
						if (_p19.debug) {
							var _p17 = A2(_elm_lang$core$Debug$log, 'BadSend', _p16._0);
							return _elm_lang$core$Maybe$Nothing;
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					}
				},
				A2(
					_elm_lang$websocket$WebSocket_LowLevel$send,
					_p15._0,
					_saschatimme$elm_phoenix$Phoenix_Internal_Message$encode(message_)));
		} else {
			return _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
		}
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Socket$isOpening = function (internalSocket) {
	var _p20 = internalSocket.connection;
	if (_p20.ctor === 'Opening') {
		return true;
	} else {
		return false;
	}
};
var _saschatimme$elm_phoenix$Phoenix_Internal_Socket$InternalSocket = F2(
	function (a, b) {
		return {connection: a, socket: b};
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Socket$Connected = F2(
	function (a, b) {
		return {ctor: 'Connected', _0: a, _1: b};
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Socket$connected = F2(
	function (ws, socket) {
		return _elm_lang$core$Native_Utils.update(
			socket,
			{
				connection: A2(_saschatimme$elm_phoenix$Phoenix_Internal_Socket$Connected, ws, 0)
			});
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Socket$increaseRef = function (socket) {
	var _p21 = socket.connection;
	if (_p21.ctor === 'Connected') {
		return _elm_lang$core$Native_Utils.update(
			socket,
			{
				connection: A2(_saschatimme$elm_phoenix$Phoenix_Internal_Socket$Connected, _p21._0, _p21._1 + 1)
			});
	} else {
		return socket;
	}
};
var _saschatimme$elm_phoenix$Phoenix_Internal_Socket$Opening = F2(
	function (a, b) {
		return {ctor: 'Opening', _0: a, _1: b};
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Socket$opening = F3(
	function (backoff, pid, socket) {
		return _elm_lang$core$Native_Utils.update(
			socket,
			{
				connection: A2(_saschatimme$elm_phoenix$Phoenix_Internal_Socket$Opening, backoff, pid)
			});
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Socket$resetBackoff = function (connection) {
	var _p22 = connection;
	if (_p22.ctor === 'Opening') {
		return A2(_saschatimme$elm_phoenix$Phoenix_Internal_Socket$Opening, 0, _p22._1);
	} else {
		return connection;
	}
};
var _saschatimme$elm_phoenix$Phoenix_Internal_Socket$update = F2(
	function (nextSocket, _p23) {
		var _p24 = _p23;
		var _p25 = _p24.connection;
		var updatedConnection = (!_elm_lang$core$Native_Utils.eq(nextSocket.params, _p24.socket.params)) ? _saschatimme$elm_phoenix$Phoenix_Internal_Socket$resetBackoff(_p25) : _p25;
		return A2(_saschatimme$elm_phoenix$Phoenix_Internal_Socket$InternalSocket, updatedConnection, nextSocket);
	});
var _saschatimme$elm_phoenix$Phoenix_Internal_Socket$Closed = {ctor: 'Closed'};
var _saschatimme$elm_phoenix$Phoenix_Internal_Socket$internalSocket = function (socket) {
	return {connection: _saschatimme$elm_phoenix$Phoenix_Internal_Socket$Closed, socket: socket};
};
